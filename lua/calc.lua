---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by foyjog.
--- DateTime: 12/25/21 9:36 AM
--- From https://leafo.net/guides/parsing-expression-grammars.html
---
---
--- Operator	    Description
--- lpeg.P(string)	Matches string literally
--- lpeg.P(n)	    Matches exactly n characters
--- lpeg.S(string)	Matches any character in string (Set)
--- lpeg.R("xy")	Matches any character between x and y (Range)
--- patt^n	        Matches at least n repetitions of patt
--- patt^-n	        Matches at most n repetitions of patt
--- patt1 * patt2	Matches patt1 followed by patt2
--- patt1 + patt2	Matches patt1 or patt2 (ordered choice)
--- patt1 - patt2	Matches patt1 if patt2 does not match
--- -patt	        Equivalent to ("" - patt)
--- #patt	        Matches patt but consumes no input
--- lpeg.B(patt)	Matches patt behind the current position, consuming no input


local lpeg = require("lpeg")
local table2string = require("table2string")


local white = lpeg.S(" \t\r\n") ^ 0

local integer = white * lpeg.R("09") ^ 1 / tonumber
local muldiv = white * lpeg.C(lpeg.S("/*"))
local addsub = white * lpeg.C(lpeg.S("+-"))

local function node(p)
    return p / function(left, op, right)
        return { op, left, right }
    end
end

local calculator = lpeg.P({
    "input",
    input = lpeg.V("exp") * -1,
    exp = lpeg.V("term") + lpeg.V("factor") + integer,
    term = node((lpeg.V("factor") + integer) * addsub * lpeg.V("exp")),
    factor = node(integer * muldiv * (lpeg.V("factor") + integer))
})

print(table2string.tostring(calculator:match("1*2/2")))
